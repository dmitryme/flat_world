#ifndef PROTO_READER_H
#define PROTO_READER_H

/* Generated by flatcc 0.5.3-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "v001"
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct proto_Order_table *proto_Order_table_t;
typedef const flatbuffers_uoffset_t *proto_Order_vec_t;
typedef flatbuffers_uoffset_t *proto_Order_mutable_vec_t;
#ifndef proto_Order_identifier
#define proto_Order_identifier flatbuffers_identifier
#endif
#define proto_Order_type_hash ((flatbuffers_thash_t)0x23f467ff)
#define proto_Order_type_identifier "\xff\x67\xf4\x23"



struct proto_Order_table { uint8_t unused__; };

static inline size_t proto_Order_vec_len(proto_Order_vec_t vec)
__flatbuffers_vec_len(vec)
static inline proto_Order_table_t proto_Order_vec_at(proto_Order_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(proto_Order_table_t, vec, i, 0)
__flatbuffers_table_as_root(proto_Order)

__flatbuffers_define_scalar_field(0, proto_Order, id, flatbuffers_uint32, uint32_t, UINT32_C(0))

#include "flatcc/flatcc_epilogue.h"
#endif /* PROTO_READER_H */
